config:
  attenuator:
    # Each attenuator is named.
    #
    # Individual things (global, service, backend, gateway) refer to
    # them by name.
    "google":
      # Google allow us to do 1 per second max
      hertz: 1.0
      # TODO(john): 429 handling
    "bing":
      # Bing allow us to do 1 every 2 seconds max
      hertz: 0.5
      # TODO(john): 429 handling
    # Maximum number of inflight requests.
    #
    # TODO(john): allow this to be over-ridden on a service-by-service
    # (and backend-by-backend) basis
    max_inflight: 100
  broker:
    listen: 0.0.0.0:8888
    upstream:
      # alex1m service
      # This is a contrived service broker which simply spreads requests
      # across the top 10 sites from the Alexa Top Million list
      #
      # This is mainly to give us nice eye-candy in grafana and verify
      # that all of the metrics are doing what we expect them to do
      "alexa1m":
        # TODO(john): hook up the TRIBE billing engine
        cost:
          alexa1m: 1
        backends:
          amazon.com:
            impl: proxy
            url: https://amazon.com
            # 'weight' is used to calculate a CDF so we spread load in
            # a weighted manner
            #
            # See: service_map.go
            weight: 1
            # 'cost' is a placeholder, and a TODO(john) when hooked up to TRIBE.
            # For now, it's 'how many cents did we charge you for this'
            cost:
          baidu.com:
            impl: proxy
            url: https://baidu.com
            weight: 8
            cost:
          bilibili.com:
            impl: proxy
            url: https://bilibili.com
            weight: 7
            cost:
          facebook.com:
            impl: proxy
            url: https://facebook.com
            weight: 6
            cost:
          google.com:
            impl: proxy
            url: https://google.com
            weight: 10
            cost:
          qq.com:
            impl: proxy
            url: https://qq.com
            weight: 5
            cost:
          twitter.com:
            impl: proxy
            url: https://twitter.com
            weight: 4
            cost:
          wikipedia.org:
            impl: proxy
            url: https://wikipedia.com
            weight: 2
            cost:
          youtube.com:
            impl: proxy
            url: https://youtube.com
            weight: 9
            cost:
          zhihu.com:
            impl: proxy
            url: https://zhihu.com
            weight: 3
            cost:
        rule: weighted
      # Name of this service.
      # We use this to map /api/v1/broker/{SERVICE} to the service map
      "search":
        # The cost of this service, as per TRIBE
        cost:
          search: 1
        # /api/v1/broker/search will randomly choose between bing and google
        # backends
        bing:
          impl: proxy
          # The URL to forward-proxy the request to
          url: https://www.bing.com
          # Any URL (or POST) params that we want to map
          params:
            # Keep the 'q=' parameter exactly as it is, i.e.
            # we don't need to rename it or map it in any way
            q: q
          # Any headers we want to send to the upstream
          headers:
            X-Alizee: wiggle
          record:
            # directory where to store requests and responses.
            # A blank value means we are not recording this thing - so
            # you could (if you wanted) only record requests or only
            # record responses.
            requests: search
            responses: search
          circuitbreaker:
            max_concurrent: 2
            max_hertz: 2
            retries: 3
            timeout_millis: 10000
        google:
          impl: proxy
          url: https://www.google.com
          params:
            # Keep the 'q=' parameter exactly as it is, i.e.
            # we don't need to rename it or map it in any way
            q: q
          circuitbreaker:
            max_concurrent: 2
            max_hertz: 2
            retries: 3
            timeout_millis: 10000
        rule: random
      "storage":
        backends:
          # TODO(john): be able to integrate with lots of storage providers
          drive:
            # Google drive
            impl: internal
          onedrive:
            # MS Onedrive
            impl: internal
          s3:
            # Amazon S3
            impl: internal
        # a 'direct' rule means that the backend must be specified
        # (akthough quite why I would ever need such a thing is lost on me)
        rule: direct
        

